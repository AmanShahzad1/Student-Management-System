-- USERS TABLE FOR LOGIN
CREATE TABLE USERS
(
USERNAME VARCHAR2(40) NOT NULL PRIMARY KEY,
PASSWORD VARCHAR2(100) NOT NULL,
ROLE VARCHAR2(20) NOT NULL
);
INSERT INTO USERS VALUES('Aman', 'amanj1', 'admin');

INSERT INTO USERS VALUES('Uzair', 'azamala', 'student');

DROP TABLE TEACHER;
-- TEACHERS TABLE
CREATE TABLE TEACHER
(
  T_ID NUMBER DEFAULT 1 PRIMARY KEY,
  T_FNAME VARCHAR2(20) NOT NULL,
  T_LNAME VARCHAR2(20) NOT NULL,
  USERNAME VARCHAR2(40) NOT NULL,
  T_EMAIL  VARCHAR2(50) NOT NULL,
  T_REG DATE NOT NULL,
  T_GENDER CHAR(1) DEFAULT '-',
  T_BLOOD VARCHAR2(3) DEFAULT '-',
  T_ADDRESS VARCHAR2(100) NOT NULL,
  T_CITY VARCHAR2(30) NOT NULL,
  CONSTRAINT FK_TEACHER FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME),
  CONSTRAINT CK_TEACHER_DETAILS_EMAIL CHECK (T_EMAIL LIKE '%@gmail.com' OR T_EMAIL LIKE '%@nu.edu.pk')
);
DROP TABLE TEACHER;


ALTER TABLE TEACHER
ADD CONSTRAINT FK_TEACHER_NEW FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME)
ON UPDATE CASCADE;
--TEACHER_CONTACT AS CONTACT CAN BE MULTIVALUED
  CREATE TABLE TEACHER_CONTACT
(
  T_ID NUMBER NOT NULL PRIMARY KEY,
  T_CONTACT VARCHAR2(11) NOT NULL,
  CONSTRAINT CK_TEACHER_DETAILS_NO CHECK (SUBSTR(T_Contact,1,4) BETWEEN '0000' AND '9999' AND SUBSTR(T_Contact,6) BETWEEN '0000000' AND '9999999'),
  CONSTRAINT FK_TEACHER_CONTACT FOREIGN KEY (T_ID) REFERENCES TEACHER(T_ID)
  ON DELETE CASCADE
);

-- TRIGGER TO UPDATE THE USERNAME
CREATE OR REPLACE TRIGGER C1
BEFORE UPDATE OF USERNAME ON TEACHER
FOR EACH ROW
DECLARE 
    temp_username TEACHER.USERNAME%TYPE := :OLD.USERNAME;
BEGIN
    UPDATE USERS SET USERNAME = :NEW.USERNAME WHERE USERNAME = temp_username;
END;

SELECT *
FROM USERS;
UPDATE TEACHER
SET USERNAME = 'AJALI'
WHERE T_ID = 1;



--PROCEDURE FOR ADMIN USE TO INSERT THE VALUES OF A TEACHER
CREATE OR REPLACE PROCEDURE TEACHER_INSERTION(
T_FNAME_IN IN VARCHAR2, T_LNAME_IN IN VARCHAR2, T_USERNAME_IN IN VARCHAR2, T_PASSWORD IN VARCHAR2, T_EMAIL_IN IN VARCHAR2, T_REG_IN IN DATE, T_GENDER_IN CHAR, T_BLOOD_IN VARCHAR2, T_ADDRESS_IN VARCHAR2, T_CITY_IN VARCHAR2, CONTACT_IN IN VARCHAR2)
IS
TEMP NUMBER:= 1;
TEMP2 NUMBER; 
BEGIN
SELECT MAX(T_ID)
INTO TEMP2
FROM TEACHER;
IF TEMP2 > 0
THEN
TEMP2 := TEMP2 + 1;
INSERT INTO USERS VALUES(T_USERNAME_IN, T_PASSWORD, 'teacher');
INSERT INTO TEACHER VALUES(TEMP2, T_FNAME_IN, T_LNAME_IN, T_USERNAME_IN,  T_EMAIL_IN, T_REG_IN, T_GENDER_IN, T_BLOOD_IN, T_ADDRESS_IN, T_CITY_IN);
INSERT INTO TEACHER_CONTACT(T_ID, T_CONTACT) VALUES(TEMP2, CONTACT_IN);
ELSE
INSERT INTO USERS VALUES(T_USERNAME_IN, T_PASSWORD, 'teacher');
INSERT INTO TEACHER VALUES(1, T_FNAME_IN, T_LNAME_IN, T_USERNAME_IN,  T_EMAIL_IN, T_REG_IN, T_GENDER_IN, T_BLOOD_IN, T_ADDRESS_IN, T_CITY_IN);
INSERT INTO TEACHER_CONTACT(T_ID, T_CONTACT) VALUES(1, CONTACT_IN);
END IF;
END;

SELECT *
FROM TEACHER;

BEGIN
TEACHER_INSERTION('Amash', 'Rizwan', 'amasham', 'maajid', 'asjid@gmail.com', '12-02-2022', 'M', 'B+', '123 Samnabad', 'Faisalabad', '03331234567');
End;


DROP TABLE TEACHER;
CREATE SEQUENCE S_ID_GEN MINVALUE 1001 START WITH 10001 CACHE 10;
CREATE TABLE STUDENT
(
  S_ID NUMBER DEFAULT 1001 PRIMARY KEY,
  S_FNAME VARCHAR2(20) NOT NULL,
  S_LNAME VARCHAR2(20) NOT NULL,
  USERNAME VARCHAR2(40) NOT NULL,
  S_REG DATE NOT NULL,
  S_GENDER CHAR(1) DEFAULT '-',
  S_BLOOD VARCHAR2(3) DEFAULT '-',
  S_CONTACT VARCHAR2(12) NOT NULL,
  S_ADDRESS VARCHAR2(100) NOT NULL,
  S_CITY VARCHAR2(30) NOT NULL,
  S_FEE VARCHAR2(10) DEFAULT 'UNPAID',
  CONSTRAINT FK_STUDENT FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME)
);


CREATE SEQUENCE S_ID_GEN MINVALUE 1001 START WITH 10001 CACHE 10;
CREATE TABLE STUDENT
(
  S_ID NUMBER DEFAULT 1001 PRIMARY KEY,
  S_FNAME VARCHAR2(20) NOT NULL,
  S_LNAME VARCHAR2(20) NOT NULL,
  USERNAME VARCHAR2(40) NOT NULL,
  S_REG DATE NOT NULL,
  S_GENDER CHAR(1) DEFAULT '-',
  S_BLOOD VARCHAR2(3) DEFAULT '-',
  S_ADDRESS VARCHAR2(100) NOT NULL,
  S_CITY VARCHAR2(30) NOT NULL,
  S_FEE VARCHAR2(10) DEFAULT 'UNPAID',
 CONSTRAINT FK_STUDENT FOREIGN KEY (USERNAME) REFERENCES USERS(USERNAME)
);
DROP TABLE STUDENT;

--STUDENT_CONTACT AS CONTACT CAN BE MULTIVALUED
  CREATE TABLE STUDENT_CONTACT
(
  S_ID NUMBER NOT NULL PRIMARY KEY,
  S_CONTACT VARCHAR2(11) NOT NULL,
  CONSTRAINT CK_STUDENT_DETAILS_NO CHECK (SUBSTR(S_Contact,1,4) BETWEEN '0000' AND '9999' AND SUBSTR(S_Contact,6) BETWEEN '0000000' AND '9999999'),
  CONSTRAINT FK_STUDENT_CONTACT FOREIGN KEY (S_ID) REFERENCES STUDENT(S_ID)
  ON DELETE CASCADE
);
DROP TABLE STUDENT_CONTACT;

--PROCEDURE FOR ADMIN USE TO INSERT THE VALUES OF A STUDENT
CREATE OR REPLACE PROCEDURE STUDENT_INSERTION(
S_FNAME_IN IN VARCHAR2, S_LNAME_IN IN VARCHAR2, S_USERNAME_IN IN VARCHAR2, S_PASSWORD IN VARCHAR2, S_REG_IN IN DATE, S_GENDER_IN CHAR, S_BLOOD_IN VARCHAR2, S_ADDRESS_IN VARCHAR2, S_CITY_IN VARCHAR2,S_FEE_IN VARCHAR2, CONTACT_IN IN VARCHAR2)
IS
TEMP NUMBER:= 1;
TEMP2 NUMBER; 
BEGIN
SELECT MAX(S_ID)
INTO TEMP2
FROM STUDENT;
IF TEMP2 > 0
THEN
TEMP2 := TEMP2 + 1;
INSERT INTO USERS VALUES(S_USERNAME_IN, S_PASSWORD ,'student');
INSERT INTO STUDENT VALUES(TEMP2,S_FNAME_IN, S_LNAME_IN, S_USERNAME_IN, S_REG_IN, S_GENDER_IN, S_BLOOD_IN, S_ADDRESS_IN, S_CITY_IN,S_FEE_IN);
INSERT INTO STUDENT_CONTACT(S_ID, S_CONTACT) VALUES(TEMP2, CONTACT_IN);
ELSE
INSERT INTO USERS VALUES(S_USERNAME_IN, S_PASSWORD ,'student');
INSERT INTO STUDENT VALUES(1001, S_FNAME_IN, S_LNAME_IN, S_USERNAME_IN, S_REG_IN, S_GENDER_IN, S_BLOOD_IN, S_ADDRESS_IN, S_CITY_IN,S_FEE_IN);
INSERT INTO STUDENT_CONTACT(S_ID, S_CONTACT) VALUES(1001, CONTACT_IN);
END IF;
END;


BEGIN
STUDENT_INSERTION('YAHYA', 'SHAUKAT', 'YAHYA404', '123', '12-02-2022', 'M', 'B+','DAEWOOROAD', 'faisalabad', 'Paid', '03331234567');
End;

SELECT *FROM STUDENT;
SELECT *FROM STUDENT_CONTACT;
SELECT *FROM USERS;
DELETE FROM USERS
WHERE ROLE = 'teacher';

INSERT INTO USERS VALUES('haseebshaukat' , 'hh123', 'admin');

CREATE OR REPLACE PROCEDURE UPDATE_USERNAME (T_ID_IN NUMBER, USERNAME_IN IN VARCHAR2)
IS
TEMP VARCHAR2(100);
BEGIN
SELECT USERNAME
INTO TEMP
FROM TEACHER
WHERE T_ID = T_ID_IN;

UPDATE USERS
SET USERNAME = USERNAME_IN
WHERE USERNAME = TEMP;

END;


BEGIN UPDATE_S_USERNAME (1002, 'Tdil'); END;

--TRIGGER TO UPDATE USERNAME FOR STUDENT
CREATE OR REPLACE TRIGGER C2
BEFORE UPDATE OF USERNAME ON STUDENT
FOR EACH ROW
DECLARE 
    temp_username STUDENT.USERNAME%TYPE := :OLD.USERNAME;
BEGIN
    UPDATE USERS SET USERNAME = :NEW.USERNAME WHERE USERNAME = temp_username;
END;


SELECT *
FROM TEACHER;

DROP TRIGGER C3;

BEGIN
UPDATE STUDENT
SET USERNAME = 'Tdil'
WHERE S_ID = 1002;
END;

ALTER TABLE STUDENT
MODIFY USERNAME VARCHAR2(100);


--Creating Class table
CREATE TABLE TEACHER_CLASS(
C_ID NUMBER NOT NULL PRIMARY KEY,
T_ID NUMBER ,
C_NAME VARCHAR2(20) NOT NULL,
CONSTRAINT FK_TEACHER_CLASS FOREIGN KEY (T_ID) REFERENCES TEACHER(T_ID) ON DELETE CASCADE
);

DROP TABLE TEACHER_CLASS;

CREATE TABLE CLASS_STUDENT(
C_ID NUMBER NOT NULL,
S_ID NUMBER NOT NULL,
CONSTRAINT FK_CLASS_STUDENT FOREIGN KEY (C_ID) REFERENCES TEACHER_CLASS(C_ID) ON DELETE CASCADE,
CONSTRAINT FK_STUDENT_CLASS FOREIGN KEY (S_ID) REFERENCES STUDENT(S_ID) ON DELETE CASCADE,
PRIMARY KEY(C_ID,S_ID)
);

--PROCEDURE FOR ADMIN USE TO ADD A CLASS
CREATE OR REPLACE PROCEDURE ADD_CLASS_OF_COURSE( CLASS_COURSE IN VARCHAR2,ASSIGN_TEACHER IN NUMBER
)
IS
TEMP NUMBER:= 1;
TEMP2 NUMBER; 
BEGIN
SELECT MAX(C_ID)
INTO TEMP2
FROM TEACHER_CLASS;
IF TEMP2 > 0
THEN
TEMP2 := TEMP2 + 1;
INSERT INTO TEACHER_CLASS VALUES(TEMP2, ASSIGN_TEACHER, CLASS_COURSE);
ELSE
INSERT INTO TEACHER_CLASS VALUES(101, ASSIGN_TEACHER, CLASS_COURSE);
END IF;
END;

BEGIN 

-- ADD STUDENT TO A PARTICULAR COURSE CLASS 
CREATE OR REPLACE PROCEDURE ADD_STUDENT_TO_CLASS_OF_COURSE( C_ID_IN IN NUMBER ,STUDENT_ID IN NUMBER
)
IS
BEGIN
INSERT INTO CLASS_STUDENT VALUES(C_ID_IN,STUDENT_ID);

END;



BEGIN
--ADD_CLASS_OF_COURSE('DATABASE',1);
ADD_STUDENT_TO_CLASS_OF_COURSE('DATABASE',1002);
End;

SELECT * FROM STUDENT;
SELECT *FROM TEACHER_CLASS;


-- Scheduling a Class
CREATE TABLE CLASSES_ON_DAY(
 D_ID NUMBER PRIMARY KEY,
 CLASS_DAY VARCHAR2(10) NOT NULL
);
INSERT INTO CLASSES_ON_DAY VALUES(1, 'Monday');
INSERT INTO CLASSES_ON_DAY VALUES(2, 'Tuesday');
INSERT INTO CLASSES_ON_DAY VALUES(3, 'Wednesday');
INSERT INTO CLASSES_ON_DAY VALUES(4, 'Thursday');
INSERT INTO CLASSES_ON_DAY VALUES(5, 'Friday');


CREATE TABLE SCHEDULE_CLASS (
  D_ID NUMBER NOT NULL,
  C_ID NUMBER NOT NULL,
  S_TIME TIMESTAMP NOT NULL,
  E_TIME TIMESTAMP NOT NULL,
  LOC_CLASS VARCHAR2(20) NOT NULL,
  CONSTRAINT FK_CLASSDAY FOREIGN KEY (D_ID) REFERENCES CLASSES_ON_DAY(D_ID) ON DELETE CASCADE,
  CONSTRAINT FK_CLASS_COURSE FOREIGN KEY (C_ID) REFERENCES TEACHER_CLASS(C_ID) ON DELETE CASCADE,
  PRIMARY KEY (D_ID, C_ID)
);

-- ADD CLASS SCHEDULE OF A PARTICULAR COURSE CLASS ON PARTICULR DAY
CREATE OR REPLACE PROCEDURE SCHEDULE_CLASS_OF_COURSE( C_ID_IN IN NUMBER ,START_TIME IN TIMESTAMP,END_TIME IN TIMESTAMP, DAYY IN VARCHAR2, LOCATION IN VARCHAR2
)
IS
VAR NUMBER:=1;
VAR2 NUMBER:=1;

BEGIN
SELECT D_ID INTO VAR2 FROM CLASSES_ON_DAY WHERE CLASS_DAY=DAYY;

INSERT INTO SCHEDULE_CLASS VALUES(VAR2,C_ID_IN,START_TIME,END_TIME,LOCATION);

END;

SELECT *
FROM SCHEDULE_CLASS;



CREATE OR REPLACE VIEW TIMETABLE AS
SELECT d.CLASS_DAY, sc.C_ID,tc.C_NAME COURSE, tc. T_ID, t.T_FNAME TEACHER_FNAME,  t.T_LNAME TEACHER_LNAME, TO_CHAR(sc.S_TIME, 'HH24:MI:SS') STARTING_TIME, TO_CHAR(sc.E_TIME, 'HH24:MI:SS') END_TIME, sc.LOC_CLASS Location
FROM SCHEDULE_CLASS sc, TEACHER_CLASS tc, CLASSES_ON_DAY d, TEACHER t
WHERE sc.C_ID = tc.C_ID
AND d.D_ID = sc.D_ID
AND tc.T_ID = t.T_ID;

SELECT *
FROM TIMETABLE;


CREATE TABLE ATTENDANCE (
D_ID NUMBER NOT NULL,
C_ID NUMBER NOT NULL,
S_ID NUMBER NOT NULL,
STATUS CHAR(1) DEFAULT '-',
CONSTRAINT FK_CLASSDAY_ATT FOREIGN KEY (D_ID) REFERENCES CLASSES_ON_DAY(D_ID) ON DELETE CASCADE,
CONSTRAINT FK_CLASS_COURSE_ATT FOREIGN KEY (C_ID) REFERENCES TEACHER_CLASS(C_ID) ON DELETE CASCADE,
CONSTRAINT FK_STUDENT_CLASS_ATT FOREIGN KEY (S_ID) REFERENCES STUDENT(S_ID) ON DELETE CASCADE,
PRIMARY KEY (S_ID,C_ID)
);

CREATE TABLE ATTENDANCE_REPORT (
C_ID NUMBER NOT NULL,
S_ID NUMBER NOT NULL,
TOTAL_CLASSES NUMBER ,
ATTENDED_CLASSES NUMBER ,
CONSTRAINT FK_CLASS_COURSE_ATT_REP FOREIGN KEY (C_ID) REFERENCES TEACHER_CLASS(C_ID) ON DELETE CASCADE,
CONSTRAINT FK_STUDENT_CLASS_ATT_REP FOREIGN KEY (S_ID) REFERENCES STUDENT(S_ID) ON DELETE CASCADE,
PRIMARY KEY (S_ID,C_ID)
);

CREATE OR REPLACE PROCEDURE MARKS_ATT_STUDENT(C_ID IN NUMBER, S_ID IN NUMBER, ATT IN CHAR
)
IS
VAR NUMBER:= C_ID;
VAR2 NUMBER:= S_ID;

BEGIN
UPDATE ATTENDANCE SET STATUS=ATT WHERE C_ID=VAR AND S_ID=VAR2;
END;

CREATE OR REPLACE PROCEDURE MARKS_ATT_STUDENT(C_ID IN NUMBER, S_ID IN NUMBER, ATT IN CHAR)
IS
BEGIN
    UPDATE ATTENDANCE
    SET STATUS = ATT
    WHERE C_ID = C_ID AND S_ID = S_ID;

    UPDTE_REPORT_ATT(C_ID, S_ID, ATT);
END;



CREATE OR REPLACE PROCEDURE UPDTE_REPORT_ATT(C_ID IN NUMBER, S_ID IN NUMBER, ATT IN CHAR)
IS
BEGIN
    UPDATE ATTENDANCE_REPORT
    SET TOTAL_CLASSES = TOTAL_CLASSES + 1,
        ATTENDED_CLASSES = CASE WHEN ATT = 'P' THEN ATTENDED_CLASSES + 1 ELSE ATTENDED_CLASSES END
    WHERE C_ID = C_ID AND S_ID = S_ID;
END;